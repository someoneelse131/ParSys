services:
  mongodb1:
    image: mongo:7.0
    container_name: db1
    restart: always
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'host.docker.internal:27017',priority:1},{_id:1,host:'host.docker.internal:27018',priority:0.5},{_id:2,host:'host.docker.internal:27019',priority:0.5}]}) }" | mongosh --port 27017 --quiet
      interval: 5s
      timeout: 30s
      start_period: 0s
      start_interval: 1s
      retries: 30
#    environment:
#      MONGO_INITDB_ROOT_USERNAME: root
#      MONGO_INITDB_ROOT_PASSWORD: password
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27017"]
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - 27017:27017
    volumes:
      - "mongodb1_data:/data/db"
      - "mongodb1_config:/data/configdb"

  mongodb2:
    image: mongo:7.0
    container_name: db2
    restart: always
#    environment:
#      MONGO_INITDB_ROOT_USERNAME: root
#      MONGO_INITDB_ROOT_PASSWORD: password
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27018"]
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - 27018:27018
    volumes:
      - "mongodb2_data:/data/db"
      - "mongodb2_config:/data/configdb"

  mongodb3:
    image: mongo:7.0
    container_name: db3
    restart: always
#    environment:
#      MONGO_INITDB_ROOT_USERNAME: root
#      MONGO_INITDB_ROOT_PASSWORD: password
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27019"]
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - 27019:27019
    volumes:
      - "mongodb3_data:/data/db"
      - "mongodb3_config:/data/configdb"

volumes:
  mongodb1_data:
  mongodb1_config:
  mongodb2_data:
  mongodb2_config:
  mongodb3_data:
  mongodb3_config:

